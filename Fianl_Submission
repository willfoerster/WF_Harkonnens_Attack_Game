
Final Project Summary

Test Plan and Results:
    The basis for the unit tests are to ensure the code is working as expected during development.
    So the unit tests will be checking the veloctiy, position, and bounce functions to ensure that 
    they produce the expected values before implementing theme into the physics task.
    After all the unit tests pass at an acceptable rate, the functional rests will be used to confirm the expected
    results of the code visually. The functional tests will test if the slider and buttons work correctly in reference
    to motion of the platform and the HM.
    
    Unit Tests:
        Use ctests for all tests:
        
    1) [NotRun] test the velocity function for when the ball would be in free fall
    2) [NotRun] test the velocity function for when the ball bounces off the platform with a dead bounce and with a shield bounce
    3) [NotRun] test the velocity function for when the platform increases velocity to the left and the right
    4) [NotRun] test the position function for when the ball would be in free fall
    5) [NotRun] test the postion function for the platform moving at a constant velocity and when it accelerates from rest for both
    the left and right directions
    6) [NotRun] test the position function for when the ball would hit a wall
    7) [NotRun] test the position function for when the platform would hit the wall and either bounce or lose all velocity
    8) [NotRun] test the bounce function for when the ball is falling straight down and hits a stationary platform with and without 
    the shield boost
    9) [NotRun] test the bounce function for when the ball is falling straight down and hits a moving platform (moving both left aand right)
    10) [NotRun] test the led function for when the ball is free falling on the far right of the screen and the platform is stationary
    on the far left.
    11) [NotRun] test the led function with the ball free falling on the far right of the screen and the platform moving at a constant
    velocity to reach the the ball before it hits the grownd.
    
    Functional Tests:
      (Note: for tests 1-4 the HM falling object doesn't need to be on the screen)
    1) [Run: 66% Pass] Using the slider, touch and hold the middle left channel and observe the platform slowly accelerate left.
    2) [Run: 66% Pass] Using the slider, touch and hold the far left chennel and observe the platform accelerate left faster than test 1.
    3) [Run: 66% Pass] Using the slider, touch and hold the middle right channel and observe the platform slowly accelerate right.
    4) [Run: 66% Pass] Using the slider, touch and hold the far right chennel and observe the platform accelerate right faster than test 1.
    5) [Run: 100% Pass] Having the HM fall in the center with the platform at rest directly below, observe the HM bounce straight up multiple times.
                Each bounce should be smaller than the last and the HM should eventiually fall through the platform.
    6) [Run: 100% Pass] Using the same set up as step 5, press Button0 at the most .5 seconds before the HM hits the platform.
                Repeat this process unitl the HM bounces off the screen and does not come back down.
    7) [Run: 100% Pass] With the HM falling in the center straight down, use the slider to hit the HM at an angle with pressing Button0
                from both the left and right sides. Observe the HM's trajectory bounce in the direction of motion of the platform.
    8) [Run: 100% Pass] Repeat tests 5 and 6 but this time observe the right LED. As the HM  kenetic energy increase or decreases the led should blink 
                faster or slower respectively.
    9) [Run: 100% Pass] As you play the game observe the left LED increase in pwm frequency propartional to the distance between the platform 
                and the ball
    10) [Run: 100% Pass]  When the HM starts falling, use Button1 to activate the lazer and observe the HM being destroyed.
    
    Test Summary:
       Due to complications during the development of the unit tests and the timeline of the project, I was not able to develope my unit tests. 
       This set me back a little because I was not able to tests my physics calculations prior to the developemnt of the physics task. So in order
       to test the cutting points described in the unit test portion, I had to test through observation of the code and variable values. On the 
       other hand, I was able to get the project fully functional and pass almost all of the functional tests at 100% pass/fail rate. However,
       the first four functional tests only passed at a 66% pass/fail rate because the slider will randomly get stuck in a left or right possition
       increasing the velocity of the platform to maximum velocity. I attempted to fix this issue through changing the task priority and changing
       frequency of the task associated with the slider, but these attempts did not give any better results.
    
    Project Summary:
        As of demo day, my project is fully function and playable with accouple bugs. The game will freeze or the slider will get stuck in a certain 
        direction, however, this does not effect play too much because you can reset the game if these issues happen to resolve them. The project has
        fulfilled all the project specifications to the best of my ability. Some of the things that are different from the project specifications are 
        the LED1 pwm being related to the distance between the platform and the HM instead of the percent of max forced required for the platform 
        to reach the HM before it hits the ground. 
In Scope Work Items:
    1) Platform Data Sructure-complete
    2) HM Data Structure-complete
    3) Button Data Structure-complete
    4) Semaphores -completed
    5) Mutexes -completed
    6) Button Task -complete
    7) Platform Task -conpleted
    8) Physics Task -completed
    9) LCD Task -completed
    10) LED0 Task -completed
    11) LED1 Task -completed
Analysis:
    RT Tasks:
            The priority of the tasks ranged from 18 to 22. The platform task was 1 in order to attempt to fix the issue of the slider getting 
        stuck in the left or right directions. The button, physics , and lcd tasks all had the same priority of 20. The two led tasks had 
        a priority of 21 and the idle task had a priority of 22. All of these priorities were set in order to avoid the possiblity of a task
        missing its deadline. These deadlines were based on the frequency at which each task needed to be called and the the time it would take
        for all tasks to complete before the next task cycle. This is hard to calculate because each task had a variable execution time.
        For example, the physics task would take longer if it had to calculate a bounce compared to if it only needed to calculate the current 
        possition and velocities of the HM and the platform (confirmed by SEGGER). However, looking at SEGGER, each task that is run at a constant
        frequency does not miss its deadline. One curious thing to note while looking at segger is the amount of CPU Load and time the led1 task 
        takes up. I suspect this is because of the variable frequency at which it is called. The power consumption of the led1 task makes the code
        power ineffecient, but it does not interfere with the other tasks deadlines because it is the "lowest" prioty besides idle. With the data,
        collected from SEGGER, it looks like all tasks are opperating correctly and not missing there deadlines.
    Code Space:
            The code space of my project is not the prettiest as of right now because I have not cleaned up the extra code(commented out or not)
        lying around the project. Overall, the amount of functional code, that I wrote, through out the project is roughly 1300-1500 lines of
        code. The code can be cleaned up though using macros and global variables as well as creating more functions in another module to 
        make the code more readable. Furthermore, the private ConfigData struct in app.c was not holding the correct values which also forced
        me to make calcuations in the code that do not make sense to a user. Going forward, I would fix the ConfigData and implement the other
        suggestions of macros, global variables, and more functions to make the code more readable and scalable.
    Physics Update:
            In my implementation of the physics function, I did not use any libraries to calculate the position, velocity, or kenetic energy.
        For each function I coded, I used basic knowledge of physics kenematics to calculate these values. Most of my functions do not have
        acceleration because it was not necessary for my implementation. I chose to have a velocity function that would calculate a new velocity 
        baced on the incial veolcity, time, force, and mass (F=ma). This allowed me to update the velocity of the platform based on the mass
        and the force applied (capsense) to it, allowing changes in mass of the platform to effect its velocity. On the otherhand, I did use 
        acceleration to calculate the y-velocity of the HM because gravity was in the configuration data. Since I updated the y-velocity of 
        the HM and velocity of the platfrom for each time increment in the physics task, it was not necessary to have acceleration in my position
        function. Another function I created calculated the velocity of the ball after an impact with the platform. The bounce function calls 
        another function to calculate the kenetic energy of the ball and multiplies it by a percent change in kenetic energy based on if the 
        shield was activated or not. Then the function calculates the new velocity of the HM by taking the inverse of the kenetic energy physics
        equation. 
            One limitations that I had to deal with were the large values for position and velocity. In the function that calculates kenetic energy,
        I had to use a long long int because the kenetic energy value would be so large that not even a long int would hold the value. This 
        definitly makes the code less efficient, so in the future I might look to find better implementation. Another limitation I had was using
        floats to calculate values. For an unknown reason, I was only able to perform on math calculation when assigning a value to a float. For 
        example, instead of writing a = (b-c)/d I would have to write a = b-c then a = a/d. This may seem like a trivial inconvience, but I think
        that it might allude to other unknown problems with the efficiency of the code or the speed of the CPU that may be causing outher issues
        at run time.
    Scaling of Variable Space:
            When playing around with values for gravity and platform mass. I found that the gravity only works for values less than 12000mm/s^2
        and is only playable between 7000-12000. Above 12000 the bounce mechanic stops working and below 7000 the ball takes too long to hit the
        platform or ground. For the platform mass, I found that the platform works in all ranges but is playable between 10-2000kg. Taking a
        broader view of the configureation data and problems discused earier with very large numbers, values that are significantly large when
        used for configuration data like 100,000cm for the canyan size should definitly be no larger then 100,000 or else the variables will
        not have enough space to hold values for calculations or even general data. In the future, I will try to scale down any configuration
        data that is given to avoid problems and increase code efficiency by using smaller numbers.
    Future:
            If I had two more weeks to work on this project, I would start by cleaning up the code and fixing the ConfigData struct to allow
            myself the ability to understand my own code better and to debug easier. After the cleaning process is over, I would try to change 
            the implement of the PWM frequencies for led1 from being an inverse function of the distance from the platform to the HM to 
            having it be a function of the perent of max velocity it would take for the platform to reach the HM before it hits the ground. 
           At this point, I would have meet all of the project specifications, but I would not stop there. I would add some more graphics effects
           to the lazer as well as show platform health, shield charge/recharge bar, number of lives, and an end game cut scene (if I had time).
           Finally, I would implement a user menue. I would allow the user to select an option for difficulty before the game starts. The menue 
           would be navigated by touching the left or right of the slider and to choos and option the user would press button0. I think all of these
           changes are definitely plausible to be made in the next 2 weeks. 
            
    
        
